import sys
import numpy as np
import matplotlib.pyplot as plt
import scipy.optimize.lbfgsb as opt2
sys.path.append("util/" )

from my_math_utils import *
from viterbi import viterbi
from forward_backward import forward_backward,sanity_check_forward_backward


import sys
import numpy as np
import matplotlib.pyplot as plt
sys.path.append("util/" )
from my_math_utils import *
from viterbi import viterbi
from forward_backward import forward_backward,sanity_check_forward_backward
sys.path.append("sequences/" )
import discriminative_sequence_classifier as dsc

class StructuredPercetron(dsc.DiscriminativeSequenceClassifier):
    ''' Implements a first order CRF'''

    def __init__(self,dataset,feature_class,nr_rounds = 10,learning_rate = 1, averaged = True):
        dsc.DiscriminativeSequenceClassifier.__init__(self,dataset,feature_class)
        self.nr_rounds = nr_rounds
        self.learning_rate = learning_rate
        self.averaged = averaged
        self.params_per_round = []

    def train_supervised(self,sequence_list):
        parameters = np.zeros(self.feature_class.nr_feats,dtype=float)
        ## Randomize the examples
        nr_x = len(sequence_list)
        #perm = np.random.permutation(nr_x)
        nr_tags = len(self.dataset.int_to_pos)
        
        for round_nr in xrange(self.nr_rounds):
             incorrect = 0
             total = 0
             for nr in xrange(nr_x):
                #print "iter %i" %( round_nr*nr_x + nr)
                #seq = sequence_list[perm[nr]]
                seq = sequence_list[nr]
                y_hat = self.viterbi_decode(seq)
                ## Update features
                for pos in xrange(len(seq.x)):
                    y_t_true = seq.y[pos]
                    y_t_hat = y_hat.y[pos][0]
                    total += 1
                    if(y_t_true != y_t_hat):
                        incorrect += 1
                        truth_node_features = self.feature_class.get_node_features(seq,pos,y_t_true)
                        parameters[truth_node_features] += self.learning_rate
                     #   print y_t_hat
                        hat_node_features = self.feature_class.get_node_features(seq,pos,y_t_hat)
                        parameters[hat_node_features] -= self.learning_rate
                        if(pos > 0):
                            ## Need to remove all previous tag features
                            for prev_tag in xrange(nr_tags):
                                truth_edge_features = self.feature_class.get_edge_features(seq,pos,y_t_true,prev_tag)
                                parameters[truth_edge_features] += self.learning_rate                                
                                hat_edge_features = self.feature_class.get_edge_features(seq,pos,y_t_hat,prev_tag)
                                parameters[hat_edge_features] -= self.learning_rate
                            
                self.parameters = parameters
             self.params_per_round.append(parameters.copy())   
             acc = 1.0 - 1.0*incorrect/total
             print "Epoch: %i Accuracy: %f" %( round_nr,acc) 
        self.trained = True
        
        if(self.averaged == True):
            new_w = 0
            for old_w in self.params_per_round:
                new_w += old_w
            new_w = new_w / len(self.params_per_round)
            return new_w
        return params
